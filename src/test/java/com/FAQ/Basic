 What is Rest Assured? Why do we use it?

Rest Assured is a Java-based library used to test RESTful web services. It simplifies API testing by eliminating the need for writing manual HTTP requests.

It is built on top of Apache HTTP Client.
Supports GET, POST, PUT, DELETE, PATCH requests.
Provides built-in methods for request & response validation.
Works well with TestNG & JUnit frameworks.

============================================================================================================================================================

2Ô∏è‚É£ How do you set up Rest Assured in a Maven project?

You need to add the following Maven dependency in pom.xml:

<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>rest-assured</artifactId>
    <version>5.3.0</version>
    <scope>test</scope>
</dependency>
Then, import the required classes in your Java code.

============================================================================================================================================================

3Ô∏è‚É£ What are the different HTTP methods in Rest Assured?

Rest Assured supports various HTTP methods such as:

GET - Retrieves data from the server.
POST - Sends data to create a new resource.
PUT - Updates an existing resource.
DELETE - Removes a resource.
PATCH - Partially updates a resource.
HEAD - Retrieves only headers without a response body.
OPTIONS - Fetches supported HTTP methods for an endpoint.

============================================================================================================================================================

4Ô∏è‚É£ What is the difference between Path Parameters and Query Parameters?

Path Parameters are part of the URL and define a specific resource. Example:
https://api.example.com/users/123  (123 is a Path Parameter)
Query Parameters are key-value pairs sent in the URL after ?. Example:

https://api.example.com/users?name=John&age=30
Here, name=John and age=30 are query parameters.

============================================================================================================================================================

5Ô∏è‚É£ How do you validate response status codes in Rest Assured?

Use statusCode() inside then():

given()
    .when().get("https://api.example.com/users")
    .then().statusCode(200);

============================================================================================================================================================

You can also validate negative scenarios like 404 Not Found:

given()
    .when().get("https://api.example.com/invalid")
    .then().statusCode(404);

============================================================================================================================================================

6Ô∏è‚É£ How do you send headers, cookies, and query parameters in Rest Assured?

Headers:
given().header("Authorization", "Bearer token123")
       .when().get("https://api.example.com/data")
       .then().statusCode(200);

Cookies:
given().cookie("session_id", "abcd1234")
       .when().get("https://api.example.com/data")
       .then().statusCode(200);

Query Parameters:
given().queryParam("name", "John")
       .queryParam("age", 30)
       .when().get("https://api.example.com/users")
       .then().statusCode(200);

============================================================================================================================================================

7Ô∏è‚É£ How do you validate the response body in Rest Assured?

To check if a response contains a specific value:

given()
    .when().get("https://api.example.com/users/1")
    .then().body("name", equalTo("John Doe"));
To check multiple fields:

given()
    .when().get("https://api.example.com/users/1")
    .then().body("name", equalTo("John Doe"))
           .body("age", equalTo(30));

============================================================================================================================================================

8Ô∏è‚É£ How do you extract values from JSON response in Rest Assured?

Using JsonPath:

Response response = given()
                      .when().get("https://api.example.com/users/1");

JsonPath jsonPath = response.jsonPath();
String name = jsonPath.getString("name");
int age = jsonPath.getInt("age");

System.out.println("Name: " + name);
System.out.println("Age: " + age);

============================================================================================================================================================

9Ô∏è‚É£ How do you send a POST request with JSON data in Rest Assured?

String requestBody = "{ \"name\": \"John\", \"age\": 30 }";

given()
    .header("Content-Type", "application/json")
    .body(requestBody)
    .when().post("https://api.example.com/users")
    .then().statusCode(201);

============================================================================================================================================================

üîü How do you log API requests and responses in Rest Assured?

Use log().all() before given() or then() to log the full details:

given()
    .log().all()  // Logs request details
    .when().get("https://api.example.com/users")
    .then().log().all()  // Logs response details
    .statusCode(200);

============================================================================================================================================================

1Ô∏è‚É£1Ô∏è‚É£ How do you validate response time in Rest Assured?

Use .time() to verify response time in milliseconds:

given()
    .when().get("https://api.example.com/users")
    .then().time(lessThan(2000L)); // Check if response time is under 2 seconds

============================================================================================================================================================

1Ô∏è‚É£2Ô∏è‚É£ How do you handle authentication in Rest Assured?

Basic Authentication:

given()
    .auth().basic("username", "password")
    .when().get("https://api.example.com/secure-data")
    .then().statusCode(200);
Bearer Token Authentication:

given()
    .header("Authorization", "Bearer token123")
    .when().get("https://api.example.com/data")
    .then().statusCode(200);

============================================================================================================================================================

1Ô∏è‚É£3Ô∏è‚É£ How do you test a DELETE request in Rest Assured?

given()
    .when().delete("https://api.example.com/users/1")
    .then().statusCode(204);
204 means No Content, indicating a successful deletion.

============================================================================================================================================================

1Ô∏è‚É£4Ô∏è‚É£ How do you send form-data in Rest Assured?

Use .formParam() for x-www-form-urlencoded data:

given()
    .contentType("application/x-www-form-urlencoded")
    .formParam("username", "john123")
    .formParam("password", "pass@123")
    .when().post("https://api.example.com/login")
    .then().statusCode(200);

============================================================================================================================================================

1Ô∏è‚É£5Ô∏è‚É£ How do you integrate Rest Assured with TestNG?

Write API tests inside @Test methods:

public class APITest {

    @Test
    public void testGetUsers() {
        given()
            .when().get("https://api.example.com/users")
            .then().statusCode(200);
    }
}

============================================================================================================================================================

1Ô∏è‚É£5Ô∏è‚É£ Send Attachment

File file = new File("src/test/resources/test-image.png");

given()
    .multiPart("file", file)
    .contentType("multipart/form-data")
.when()
    .post("https://api.example.com/upload")
.then()
    .statusCode(200);

============================================================================================================================================================

1Ô∏è‚É£5Ô∏è‚É£ All in one

given().log().all()
       .cookie("session_id", "abcd1234")
       .header("Authorization", "Bearer token123")
       .header("Content-Type", "application/json")
       .formParam("username", "john123")
       .formParam("password", "pass@123")
       .multiPart("file", file)
       .contentType("multipart/form-data")
       .body(requestBody)
       .queryParam("name", "John")
       .queryParam("age", 30)
       .pathParam("id", 2)
.when().log().all()
       .get("https://api.example.com/data/{id}")
       .then().statusCode(200);

============================================================================================================================================================

In REST (and HTTP in general), idempotency refers to an operation that can be performed multiple times without changing the result beyond the initial application.
In other words, calling the same API repeatedly should have the same effect as calling it once ‚Äî if it's idempotent.

‚úÖ Idempotent HTTP Methods:
HTTP Method	                            Idempotent?	Explanation
GET	                                    ‚úÖ Yes	Fetches data without changing server state. Multiple calls return the same result.
PUT	                                    ‚úÖ Yes	Updates/replaces a resource. Multiple identical PUTs result in the same final state.
DELETE	                                ‚úÖ Yes	Deletes a resource. Once deleted, repeated DELETEs have no further effect.
HEAD	                                ‚úÖ Yes	Same as GET but only returns headers. No side effects.
OPTIONS	                                ‚úÖ Yes	Used to describe communication options. Doesn‚Äôt change server state.

‚ùå Non-Idempotent HTTP Methods:
HTTP Method	        Idempotent?	        Explanation
POST	            ‚ùå No	            Creates a new resource. Multiple POSTs usually create duplicates or multiple effects.
PATCH	            ‚ö†Ô∏è Depends	        Partially updates a resource. Can be idempotent if designed carefully, but often isn't.

üîÅ Example Scenarios:

GET /users/123 ‚Äî Fetch user info. ‚úÖ Safe and idempotent.

PUT /users/123 with same data ‚Äî Replaces user info. ‚úÖ Idempotent.

DELETE /users/123 ‚Äî Deletes the user. ‚úÖ Idempotent (after first deletion, subsequent ones do nothing).

POST /users with user data ‚Äî Creates a user. ‚ùå Not idempotent (repeated calls may create duplicates).

PATCH /users/123 to update name ‚Äî ‚ùå May not be idempotent (depends on logic; could stack changes).

üß† Key Insight:

Idempotent does not mean safe (e.g., DELETE is idempotent but not safe).

If you're building APIs, favor idempotent methods when possible for better fault tolerance and retry logic.